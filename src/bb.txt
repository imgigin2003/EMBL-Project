// Function to generate a DOT file from the JSON input file
fn generate_graph(input_json: &str, output_dot: &str) {
    // Open the JSON file for reading
    let file = File::open(input_json).expect("Failed to open JSON file.");
    let reader = BufReader::new(file);

    // Initialize the DOT file content with the graph declaration
    let mut dot_content = String::from("digraph G {\n");

    // Process each line from the JSON file
    for line in reader.lines() {
        let line = line.expect("Failed to read lines from JSON file");
        let value: Value = serde_json::from_str(&line).expect("Failed to parse JSON line.");

        // Match the type of the JSON object (node or relationship)
        match value.get("type").and_then(|v| v.as_str()) {
            // Handle node representation
            Some("node") => {
                // Extract node ID and name for DOT representation
                let id = value["id"].as_str().unwrap();
                // Replace double quotes with escaped double quotes for DOT compatibility
                let name = value["properties"]["name"].as_str().unwrap_or("unknown").replace("\"", "\\\"");
                // Append the node representation to the DOT content
                dot_content.push_str(&format!("    \"{}\" [label=\"{}\"]\n", id, name));
            }
            // Handle relationship representation
            Some("relationship") => {
                // Extract relationship start ID, end ID, and label for DOT representation
                let start_id = value["start"]["id"].as_str().unwrap();
                // Replace double quotes with escaped double quotes for DOT compatibility
                let end_id = value["end"]["id"].as_str().unwrap();
                // Replace double quotes with escaped double quotes for DOT compatibility
                let label = value["label"].as_str().unwrap_or("unknown").replace("\"", "\\\"");
                // Append the relationship representation to the DOT content
                dot_content.push_str(&format!("    \"{}\" -> \"{}\" [label=\"{}\"]\n", start_id, end_id, label));
            }
            // Ignore other types of JSON objects
            _ => {}
        }
    }

    // Close the graph declaration in the DOT file
    dot_content.push_str("}\n");

    // Write the DOT content to the output file
    let mut output_file = File::create(output_dot).expect("Failed to create DOT file.");
    output_file.write_all(dot_content.as_bytes()).expect("Failed to write to DOT file.");
}
